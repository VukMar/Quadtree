#ifndef WFC_ELEMENTS_HPP
#define WFC_ELEMENTS_HPP

#include <cstddef>
#include <vector>
#include <string>
#include <iostream>

namespace qt
{

///////////////////////////////////////////////////////////////////////////////////
/// @brief Vector of two float numbers used to represent position.
///////////////////////////////////////////////////////////////////////////////////
struct Vec2f
{
float x, y;

public:

Vec2f(){}

Vec2f(float x,float y)
{
    this->x = x;
    this->y = y;
}
};
///////////////////////////////////////////////////////////////////////////////////
/// @brief Element class that represent element of quad tree. This class contains position in 2D space, ID and the given custom object.
///////////////////////////////////////////////////////////////////////////////////
class Element 
{

public:

//////////////////////////////////////////////////////////////////////////////////
/// @brief Default Constructor.
//////////////////////////////////////////////////////////////////////////////////
Element();

//////////////////////////////////////////////////////////////////////////////////
/// @brief Constructor.
/// @param x Position along and X-Axis.
/// @param y Position along Y-Axis.
/// @param ID ID for element identification.
//////////////////////////////////////////////////////////////////////////////////
Element(float x, float y, int ID);

//////////////////////////////////////////////////////////////////////////////////
/// @brief Returns the Position of and element in 2D space.
/// @return The return type is qt::Vec2f.
//////////////////////////////////////////////////////////////////////////////////
Vec2f getPosition();

//////////////////////////////////////////////////////////////////////////////////
/// @brief Sets the possition of the Element. 
/// @param x Position along and X-Axis.
/// @param y Position along Y-Axis.
//////////////////////////////////////////////////////////////////////////////////
void setPosition(float x, float y);

//////////////////////////////////////////////////////////////////////////////////
/// @brief Sets the possition of the Element. 
/// @param Position qt::Vec2f containing position.
//////////////////////////////////////////////////////////////////////////////////
void setPosition(Vec2f Position);

//////////////////////////////////////////////////////////////////////////////////
/// @brief Get ID of the Element.
/// @return Return and integer that represents the ID.
//////////////////////////////////////////////////////////////////////////////////
int getID();

//////////////////////////////////////////////////////////////////////////////////
/// @brief Sets the ID of the Element.
/// @param ID Integer that represents the ID.
//////////////////////////////////////////////////////////////////////////////////
void setID(int ID);

//////////////////////////////////////////////////////////////////////////////////
/// @brief Gets pointer to the added Object.
/// @return Returns void pointer that needs to be cast to the object type. using "static_cast();".
//////////////////////////////////////////////////////////////////////////////////
void* getObjectPointer();

//////////////////////////////////////////////////////////////////////////////////
/// @brief Stores pointer to the object as void.
/// @param Object Pointer to the object.
//////////////////////////////////////////////////////////////////////////////////
void setObjectPointer(void* Object);

~Element();

private:

float x, y;

int ID;

void* Object;

};

class Rectangle
{
private:

Vec2f StartingPoint;

Vec2f Size;

public:
//////////////////////////////////////////////////////////////////////////////////
/// @brief Default constructor.
//////////////////////////////////////////////////////////////////////////////////
Rectangle();

//////////////////////////////////////////////////////////////////////////////////
/// @brief Constructor.
/// @param PosX Position along X-Axis.
/// @param PosY Position along Y-Axis.
/// @param width The width of the node Boundary.
/// @param height The height of the node Boundary.
//////////////////////////////////////////////////////////////////////////////////
Rectangle(float PosX, float PosY, float width, float height);

//////////////////////////////////////////////////////////////////////////////////
/// @brief 
//////////////////////////////////////////////////////////////////////////////////
Vec2f getStartingPoint();

//////////////////////////////////////////////////////////////////////////////////
/// @brief 
//////////////////////////////////////////////////////////////////////////////////
Vec2f getSize();

//////////////////////////////////////////////////////////////////////////////////
/// @brief Checks if element is within the bounds of a rectangle.
/// @param Element Element class that hold a pointer to a custom object.
/// @return Returns true if element is inside a rectagle.
//////////////////////////////////////////////////////////////////////////////////
bool contains(Element Element);

~Rectangle();

};

class QuadTreeNode
{
private:

int Capacity;

std::vector<Element> Elements;

Rectangle Boundary;

QuadTreeNode *Childern[4];

bool divided = false;

//////////////////////////////////////////////////////////////////////////////////
/// @brief Divides the node into 4 child nodes.
//////////////////////////////////////////////////////////////////////////////////
void subdivide();

public:

//////////////////////////////////////////////////////////////////////////////////
/// @brief Consturctor.
/// @param Boundary A rectagle class representing a boundary for a quadtree node.
/// @param Capacity Number of elements a node can store.
//////////////////////////////////////////////////////////////////////////////////
QuadTreeNode(Rectangle Boundary, int Capacity);

//////////////////////////////////////////////////////////////////////////////////
/// @brief Default Constructor.
//////////////////////////////////////////////////////////////////////////////////
QuadTreeNode();

///////////////////////////////////////////////////////////////////////////////////
/// @brief Inserts an element to a Quad Tree node.
/// @param Element is a qt::Element type containing a pointer to custom object.
/// @return Returns true if object is inserted in a node.
///////////////////////////////////////////////////////////////////////////////////
bool insert(Element Element);

///////////////////////////////////////////////////////////////////////////////////
/// @return Return true if node is divided.
///////////////////////////////////////////////////////////////////////////////////
bool isDivided();

///////////////////////////////////////////////////////////////////////////////////
/// @brief Gets a boudry of current node.
/// @return Retrun type is qt::Rectagle.
///////////////////////////////////////////////////////////////////////////////////
Rectangle getBoundary();

///////////////////////////////////////////////////////////////////////////////////
/// @brief Gets a child node of a this QuadTree node. There are only 4 child nodes if 
/// each node.
/// @param Child Index of a child. Lowest index is 0, largest is 3.
///////////////////////////////////////////////////////////////////////////////////
QuadTreeNode* getChild(int Child);

///////////////////////////////////////////////////////////////////////////////////
/// @brief Returns a list of elements of a current rect inside a a QuadTree.
/// @return The return type is std::vector.
///////////////////////////////////////////////////////////////////////////////////
std::vector<Element> getElements();

///////////////////////////////////////////////////////////////////////////////////
/// @brief Clears all elements and child nodes.
///////////////////////////////////////////////////////////////////////////////////
void clear();

~QuadTreeNode();

};

}

#endif